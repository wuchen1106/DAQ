.TH "RC_mhttpd_defining_script_buttons" 3 "31 May 2012" "Version 2.3.0-0" "Midas" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RC_mhttpd_defining_script_buttons \- Defining Script Buttons on the main Status Page 

.br
.PP
.PP
 
.SH "The ODB /Script tree"
.PP
\fBNote:\fP
.RS 4
The /Script tree is applicable to \fBmhttpd\fP, and ignored by \fBodbedit\fP.
.RE
.PP
The optional ODB tree /Script provides the user with a way to execute a script when a button on the mhttpd \fBmain status page\fP is clicked, including the \fBcapability of passing \fBparameters\fP from the ODB to the script\fP.
.PP

.br
 If the user defines a new tree in ODB named /Script , then any key created in this tree will appear as a script-button of that name on the default mhttpd main status page. Each sub-tree ( /Script/<button name>/) should contain at least one string key which is the script command to be executed. Further keys will be passed as \fB arguments \fP to the script. MIDAS symbolic links are permitted.
.SH "Example 1: creation of a Script-button; parameters passed to the associated script"
.PP
The \fB example \fP below shows the ODB /script/dac subdirectory. The script-button \fB'dac'\fP associated with this subdirectory is shown on the example mhttpd status page below.
.PP
The first key in the dac subdirectory is the string key cmd which contains the name and path of the script to be executed (in this case, a perl script). This script is located on the local host computer on which the experiment is running. The subsequent keys are \fBparameters\fP input to the script. 
.PP
.nf
[local:pol:R]/>ls '/script/dac'
cmd                             /home/pol/online/perl/change_mode.pl
include path                    /home/pol/online/perl
experiment name -> /experiment/name
                                pol
select mode                     1h

mode file tag                   none
[local:pol:R]/>  

.fi
.PP
.PP
This will cause a script-button labelled \fB'DAC'\fP to appear on the mhttpd main status page : 
.br
  Script button 'DAC' on the mhttpd main status page  
.br
.PP
When the \fB'DAC'\fP script-button is pressed, the script \fB'change_mode.pl'\fP will be executed with the following key contents as \fBparameters\fP, equivalent to the command: 
.PP
.nf
  '/home/pol/online/perl/change_mode.pl  /home/pol/online/perl pol 1h mode'

.fi
.PP
 
.br
.PP
The following is part of the code of the script \fB'change_mode.pl'\fP : 
.PP
.nf
# input parameters :

our ($inc_dir, $expt, $select_mode, $mode_name ) = @ARGV;
our $len = $#ARGV; # array length
our $name = 'change_mode' ; # same as filename
our $outfile = 'change_mode.txt'; # path will be added by file open function
our $parameter_msg = 'include path , experiment , select_new_mode  mode_name';
our $nparam = 4;  # no. of input parameters
our $beamline = $expt; # beamline is not supplied. Same as $expt for bnm/qr, pol
############################################################################
# local variables:
my ($transition, $run_state, $path, $key, $status);

# Inc_dir needed because when script is invoked by browser it can't find the
# code for require

unless ($inc_dir) { die '$name: No include directory path has been supplied\n';}
$inc_dir =~ s/\/$//;  # remove any trailing slash
require '$inc_dir/odb_access.pl';
require '$inc_dir/do_link.pl';

# init_check.pl checks:
#   one copy of this script running
#   no. of input parameters is correct
#   opens output file:
#
require '$inc_dir/init_check.pl'; 

# Output will be sent to file $outfile (file handle FOUT)
# because this is for use with the browser and STDOUT and STDERR get set to null


print FOUT  '$name starting with parameters:  \n';
print FOUT  'Experiment = $expt, select new mode = $select_mode;  load file mode_name=$mode_name \n';

unless ($select_mode)
{
    print FOUT 'FAILURE: selected mode  not supplied\n';
        odb_cmd ( 'msg','$MERROR','','$name', 'FAILURE:  selected mode not supplied ' ) ;
        unless ($status) { print FOUT '$name: Failure return after msg \n'; }
        die  'FAILURE:  selected mode  not supplied \n';

}
unless ($select_mode =~/^[12]/)
{
    print_3 ($name,'FAILURE: invalid selected mode ($select_mode)',$MERROR,1);
}

etc.

.fi
.PP
.SH "Example 2: MPET experiment run controller"
.PP
This example is from the MPET experiment at TRIUMF, which uses a sophisticated run controller. This includes perlscripts actived by script buttons. The experiment can be set to perform a number of consecutive runs without user intervention, changing some condition(s) between each run. The results are written to a log file.
.PP
It involves the use of large number of script-buttons on the Main Status page to activate the perlscripts (see Figure 1). Clicking on one of these buttons causes a user-defined shell-script to be run with a particular parameter.
.PP

.br

.br

.br
  Figure 1 Main Status page of MPET experiment    
.br

.br

.br
.PP
This experiment is using an older version of mhttpd (see \fBRedesign of mhttpd Main Status Page\fP ).
.PP
The script-buttons are defined in the ODB /Script tree (see Figure 2). All activate the shell-script perlrc.sh with the appropriate parameter. The first two script-buttons labelled 'Start PerlRC' and 'Stop PerlRC' start and stop the run control respectively. These access \fBparameters\fP read from the ODB to determine the scan type, the number of runs to be performed, etc. The other buttons 'Tune...' are used to set up run \fBparameters\fP into particular known states or 'Tunes'.
.PP

.br
 
.br

.br

.br
  Figure 2 /Script ODB tree for the MPET experiment    
.br

.br

.br
.PP
This script calls the perlscript perlrc.pl, passing through the parameter. (Alternatively, this could have been done by \fBpassing the parameter\fP directly to the perlscript, eliminating the intermediate shell-script).
.PP
The following image shows the ODB \fBparameters\fP associated with the run control script buttons.
.PP

.br

.br

.br
  Run Control ODB \fBparameters\fP for the MPET experiment    
.br

.br

.br
 
.PD 0

.IP "\(bu" 2
Clicking on ODB...PerlRC...RunControl...Scan2D shows the RunControl Parameters 
.IP "\(bu" 2
Clicking on ODB...PerlRC...RunControl...TuneSwitch shows the Tuning Parameters 
.PP
.PP

.br
 
.PP
 
.br
.SS "MPET perlscripts to perform run control"
.IP "\(bu" 2
\fBExamples of MPET Perlscripts for run control\fP
.PP
.PP
The scripts interact with the ODB through a library \fBperlmidas.pl\fP . This may be of general interest.
.PP
.PP

.br
  
