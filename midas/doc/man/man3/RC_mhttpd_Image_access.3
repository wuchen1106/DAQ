.TH "RC_mhttpd_Image_access" 3 "31 May 2012" "Version 2.3.0-0" "Midas" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RC_mhttpd_Image_access \- Inserting an Image into a Custom page 

.br
.PP
.SH "Inserting a history image in a custom page"
.PP
In the special case where the image to be inserted is a \fBHistory\fP image, it can be inserted into a custom page using an HTML <<img...> tag of the following form: 
.PP
.nf
<img src='http://hostname.domain:port/HS/Meterdis.gif&scale=12h&width=300'>

.fi
.PP
.PP
\fBExamples\fP See \fBDemo of custom image page\fP and \fBimage\fP created by the demo.
.PP

.br
.PP

.br
  
.SH "Image insertion into a Custom page"
.PP
.IP "\(bu" 2
An image may be inserted into a custom webpage by using an HTML <img...> tag. The image file can be in any format supported by the browser (e.g.   \fBgif\fP,  \fBpng\fP,  \fBjpg\fP etc.).
.PP
.PP
.IP "\(bu" 2
Alternatively, by defining the image in the subdirectory 'images' in the /Custom ODB tree  features such as labels, bars and fills can be superimposed on the image. 
.br
 To make an image \fI'myexpt.gif'\fP available in a Custom Page, follow these steps:
.PP
.PP
.PD 0
.IP "1." 4
the subdirectory Images must be created in the ODB /Custom directory, e.g. using \fBodbedit\fP :
.PP
.PP
.nf
[local:Default:Stopped]/>cd Custom
[local:Default:Stopped]/Custom>mkdir Images  <-- if Images does not exist
[local:Default:Stopped]/Custom>cd Images/
.fi
.PP
.PP

.IP "2." 4
Under the subdirectory Images, create another subdirectory with the name of the image you are going to use (in this example, \fBmyexpt.gif\fP), i.e.
.PP
.PP
.nf
[local:Default:Stopped]Images>mkdir myexpt.gif <-- make a subdirectory with the image name
[local:Default:Stopped]Images>cd myexpt.gif/
.fi
.PP
.PP

.IP "3." 4
Under the subdirectory  myexpt.gif , create the STRING key  Background : 
.PP
.nf
[local:Default:Stopped]myexpt.gif>create string Background  <-- create key 'Background' 
String length [32]: 256

.fi
.PP
.PP

.IP "4." 4
Set the key  Background to contain the name of the image-file. 
.PP
.nf
[local:Default:Stopped]myexpt.gif>set Background \midas\examples\custom\myexpt.gif

.fi
.PP
 
.PP
.PP
This image must be referenced in a custom HTML file, such as \fBmyexpt.html\fP . This file also includes other features such as \fBactive clickable areas, labels, bars and fills\fP superimposed on the image. These are explained in the sections \fBbelow\fP.
.PP
Before it can be accessed from mhttpd, this file (\fBmyexpt.html\fP) must be \fBactivated\fP by being defined in the ODB under /Custom. This is demonstrated in the custom demo \fBexample\fP and the \fBimage\fP created by the demo.
.PP
 
.SS "Explanation of the keys in the ODB /Custom/images  subtree"
ODB Key  Explanation  
.PP
Custom/  
.br
 
.br
 
.br
 DIR User-created directory to contain custom page information 
.PP

.br
 <custom_page_link>  
.br
 
.br
 STRING User-defined custom page link(s) contains path(s) of custom page HTML code. Each custom page must be defined with a separate custom page link. Each link created here will appear as a button on the Status page (except where noted - see \fBHow to activate custom page(s) in the ODB\fP for details). The user chooses suitable names for the link(s).  
.PP

.br
 Images/  
.br
 
.br
 DIR User-created subdirectory to contain the name(s) of the defined image(s).  
.PP

.br
 
.br
 <Image_name>/  
.br
 DIR User-created subdirectory named for the corresponding image, e.g. Gas.gif, switches.gif etc. For multiple custom pages, multiple subdirectories may be defined.  
.PP

.br
 
.br
 
.br
 background  STRING Path of image file to be displayed on the custom page, e.g. \fB/home/t2ktpc/online/t2kgas/all_images/Gas.gif\fP (local file)  
.PP

.br
 
.br
 
.br
 labels/  DIR Optional subdirectory to be used for superimposing labels on top of the image. (See \fBlabels subtree\fP)  
.PP

.br
 
.br
 
.br
 bars/  DIR Optional subdirectory to be used for superimposing bars on top of the image. (See \fBbars subtree\fP)  
.PP

.br
 
.br
 
.br
 fills/  DIR Optional subdirectory to be used for superimposing fills on top of the image. (See \fBfills subtree\fP)  
.PP
Above: Meaning of keys in the ODB /Custom tree. 
.PP
  
.SH "Mapping active areas onto the image"
.PP
HTML mapping can be activated on an image to provide 'clickable' areas, using the \fBmap\fP attribute of the HTML <img> tag.
.PP
This can be done now with a new function like this: 
.PP
.nf
<map name='Custom1'>
<area shape='rect' coords='40,200,100,300' alt='Main Valve'
  href='Custom1?cmd=Toggle&odb=/Equipment/Environment/Variables/Output[2]'>
</map>
<img src='custom.gif' usemap='#Custom1'>

.fi
.PP
.PP
This defines a clickable map on top of the custom image. The area(s) should match with some area(s) on the image, e.g. the box of a valve. Determining the co-ordinates of this area is simplified by using the \fBDisplay mouse position\fP feature.
.PP
By clicking on this area, the supplied path to the ODB is used (in this case  /Equipment/Environment/Variables/Output[2]) and its value is toggled (set to 0 if it is 1, set to 0 if it is 1). If the valve value is then used in the image via a 'fill' statement to change the color of the valve, it can turn green or red depending on its state. This is illustrated in the \fBCustom Page for MEG gas system\fP .
.PP
\fBExamples\fP See also \fBDemo of custom image page\fP and \fBimage\fP created by the demo.
.SS "Image Map demo"
The following code fragment is from the demo file \fBmyexpt.html\fP (see \fBbelow\fP). 
.PP
.nf
 <map name='myexpt.map'>
     <area shape=rect coords='140,70, 420,170' 
     href='http://midas.triumf.ca/doc/html/index.html' title='Midas Doc'>
     <area shape=rect coords='200,200,400,400'
     href='http://localhost:8080' title='Switch pump'>
     <area shape=rect coords='230,515,325,600'
     href='http://localhost:8080' title='Logger in color level (using Fill)'>
  <img src='myexpt.gif' border=1 usemap='#myexpt.map'>
  </map>

.fi
.PP
.PP
Three rectangular clickable areas are defined.
.PP
See the \fBdemo\fP.
.PP

.br
.PP

.br
.SS "Area map with password check"
For safety from accidental changes, the above area map can be combined with a \fBpassword check\fP.  This is done by adding a small JavaScript function \fBpromptpwd\fP into the custom page: 
.PP
.nf
<script type='text/javascript'>
<!--
function promptpwd(path)
{
    pwd = prompt('Please enter password', '');
    document.cookie = 'cpwd=' + pwd;
    location.href = path;
}
//-->
</script>

.fi
.PP
.PP
and using it like this: 
.PP
.nf
<area shape='rect' coords='40,200,100,300' alt='Main Valve'
  href='#'
onClick='promptpwd('Custom1?cmd=toggle&pnam=CustomPwd?odb=/Equipment/Environment/Variables/Output[2]
')'>

.fi
.PP
.PP
If the \fBpwd\fP option is present in the  <odb>  tag, mhttpd establishes a call to the \fBpromptpwd()\fP function if one clicks on the value. The password is then requested from the user and is submitted as a cookie. mhttpd then checks this password against the ODB entry 
.br
 /Custom/Pwd/CustomPwd 
.br
 See \fBPassword protection of ODB variables accessed from a custom page\fP for further details.
.PP
\fBThis page\fP from the MEG experiment at PSI shows a complex gas system. It demonstrates the use of the area map features. The valves are represented as green circles. If they are clicked, they close and become red (after the user successfully supplies the correct password).
.PP

.br
.PP

.br
.PP
 
.SH "Display mouse position"
.PP
When writing custom pages with large background images and labels and fills placed on that image, it is hard to figure out X and Y coordinates of the labels. This can now be simplified by setting the label ('id') of the background HTML <img...> tag to \fB'refimg'\fP, e.g.
.PP
.PP
.nf
<img id='refimg' src='...'>
.fi
.PP
.PP
The function \fBgetMouseXY\fP in the \fBJavaScript built-in library mhttpd.js\fP supplies the X,Y position if an element of ID \fBrefimg\fP is present. Therefore, the JS library must be \fBincluded\fP.
.PP
\fBUsage:\fP 
.PP
.nf
<img  id='refimg' src='ebit_pc.gif' usemap='#Custom1'>   <!-- name='refimg' makes crosshairs appear -->
<map name='Custom1'>
.....
</map>

.fi
.PP
.PP
If the 'refimg' tag is present, the cursor changes into a crosshair, and its absolute and relative locations in respect to the reference image are shown in the status bar (Figure 1):
.PP

.br

.br

.br
   Figure 1 : Cursor position on custom page 
.br

.br

.br
   
.br

.br

.br
.PP
\fBNote:\fP
.RS 4
To make this work under Firefox, the user has to explicitly allow for status bar changes. To do so, enter about:config in the address bar. In the filter bar, enter status. Then locate dom.disable_window_status_change and set it to false.
.RE
.PP
.SH "Superimposing Labels, Bars and Fills onto an image"
.PP
You can enhance your custom page by superimposing multiple features based on ODB variables onto your image, such as
.PP
.IP "\(bu" 2
\fBlabels\fP: 'live' ODB values positioned in a particular location of the page
.IP "\(bu" 2
\fBbars\fP : 'bar level' showing graphically levels or rate etc.
.IP "\(bu" 2
\fBfills\fP : 'color level' where colour is used as the level indicator.
.IP "\(bu" 2
\fBedit boxes\fP : editable ODB values superimposed on the image
.PP
.PP
Each entry will have an ODB tree associated to it defining the ODB variable path, X/Y position, colour, etc. Each time the page is updated, the latest ODB value/level/rate will be shown based on the ODB parameter to which the label, bar or fill is linked - hence the term 'live'. The overlay of the requested features is done onto the selected \fBimage file\fP.
.PP
This powerful new extension brings the mhttpd capability closer to other experimental web controllers similar to EPICS.
.PP
\fBNote:\fP
.RS 4
Be sure to enable the feature to \fBDisplay mouse position\fP in order to facilitate finding the X,Y positions of the various features.
.RE
.PP
\fBExamples\fP See \fBDemo of custom image page\fP and \fBimage\fP created by the demo.
.PP
  
.SS "Labels superimposed on an Image"
In order to include a readout of ODB values (i.e. labels), on the image a further ODB subdirectory labels must be created. Creating  Labels/<label name> sub-directory under the \fBimage filename\fP, will, automatically at the \fBnext\fP web page refresh, complete the structure for that label, and fill it with default values:
.PP
.PP
.nf
odbedit
[local:Default:Stopped]/Custom>cd Images/myexpt.gif
[local:Default:Stopped]/myexpt.gif>mkdir Labels
[local:Default:Stopped]/myexpt.gif>cd labels
[local:Default:Stopped]Labels>mkdir Rate
[local:Default:Stopped]Rate>
.fi
.PP
.PP
The above example assumes that the image-filename is \fBmyexpt.gif\fP . After the next refresh, the structure will have been created for the Rate label: 
.PP
.nf
[local:Default:Stopped]Rate>ls -l
Key name                        Type    #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
Src                             STRING  1     256   2m   0   RWD
Format                          STRING  1     32    2m   0   RWD  %1.1f
Font                            STRING  1     32    2m   0   RWD  Medium
X                               INT     1     4     2m   0   RWD  0
Y                               INT     1     4     2m   0   RWD  0
Align                           INT     1     4     2m   0   RWD  0
FGColor                         STRING  1     8     2m   0   RWD  000000
BGColor                         STRING  1     8     2m   0   RWD  FFFFFF

.fi
.PP
.PP
This procedure is repeated for all the labels required, using a unique <label_name> subdirectory for each label.
.SS "Explanation of the keys in the /Custom/images/Labels ODB subtree"
Keys in the ODB subtree ../Labels/<label_name>  
.PP
ODB Key  Explanation  
.PP
.../Labels/<label_name>  
.br
 DIR 
.br
 
.PP

.br
 Src  STRING Path of a valid ODB Key variable. This is the value to be used for this label  
.PP

.br
 Format  STRING Format string for this value e.g. '%5.2f%% iBu' (-> percentage of iBu) or 'Rate:%1.1f kB/s'  
.PP

.br
 Font  STRING Font size for this label. Set to one of 'small',  'medium' or 'giant'.  
.PP

.br
 X position of this label in pixels  INT X position for this label in pixels  
.PP

.br
 Y  INT Y position for this label.  
.PP

.br
 Align  INT Integer representing Horizontal Alignment for this label. Set to one of 0 (left), 1 (center) or 2 (right).  
.PP

.br
 FGColor  STRING Foreground colour RRGGBB (hex) for this label. See \fBcolour table\fP.  
.PP

.br
 BGColor  STRING Background colour RRGGBB (hex) for this label, See \fBcolour table\fP.   Above: Meaning of keys in the ODB /Custom/images/Labels/<label_name> subtree. 
.PP

.br
.PP

.br
.PP
  Colour RGB Value 
.PP
black 000000  white FFFFFF  red FF0000  blue 0000FF  lime green 00FF00  yellow FFFF00  gray 808080  Above: RGB values defined in HTML standards for some common colours 
.PP

.br
.PP

.br
.PP
  
.SS "Bars superimposed on an Image"
To include bars on the image, a further subdirectory Bars must be created. Following the same principle as for the \fBlabels\fP, by creating Bars/<bar_name>, the structure for the bar will be filled with a default setting after refreshing the custom MIDAS page.
.PP
This procedure is repeated for all the bars required, using a unique <bar_name> subdirectory for each bar. 
.br
.SS "Explanation of the keys in the /Custom/Images/Bars ODB subtree"
Keys in the ODB subtree ../Bars/<bar_name>   ODB Key  Explanation  
.PP
.../Bars/<bar_name>  
.br
 DIR 
.br
 
.PP

.br
 Src  STRING Path of a valid ODB Key variable. This is the value to be used for this bar  
.PP

.br
 X position of this bar in pixels  INT X position for this label in pixels  
.PP

.br
 Y  INT Y position for this bar in pixels.  
.PP

.br
 Width  INT Width of this bar in pixels.  
.PP

.br
 Height  INT Height of this bar in pixels.  
.PP

.br
 Direction  INT Direction of this bar. Either 0 (vertical) or 1 (horizontal).  
.PP

.br
 Axis  INT Draw axis. One of 0 (none) or 1 (left) or 2 (right).  
.PP

.br
 Logscale  BOOL Draw logarithmic axis. Either 'y' or 'n'.  
.PP

.br
 Min  DOUBLE Minimum value for axis  
.PP

.br
 Max  DOUBLE Maximum value for axis  
.PP

.br
 FGColor  STRING Foreground colour RRGGBB (hex) for this bar. See \fBcolour table\fP.  
.PP

.br
 BGColor  STRING Background colour RRGGBB (hex) for this bar. See \fBcolour table\fP.  
.PP

.br
 BDColor  STRING Border colour RRGGBB (hex) for this bar. See \fBcolour table\fP.   Above: Meaning of keys in the ODB /Custom/Images/Bars/<bar_name> subtree. 
.PP

.br
.PP

.br
.PP
  
.SH "Fills superimposed on an Image"
.PP
The last option available is the \fBFills\fP where an area can be filled with different colours depending on the given ODB value (src parameter). In order to include filled areas on the image, a further ODB subdirectory Fills must be created. The colour selection is mapped by correspondence of the index of the  Limits array to the Fillcolors array, both of which must be created in the ODB Fills subdirectory.
.SS "Create the custom  Fills keys"
Presently the fills structure is not pre-defined and needs to be entered by hand, e.g.
.PP
.PP
.nf
Tue> odbedit
[local:midas:Stopped]/>cd Custom/Images/myexpt.gif
[local:midas:myexpt.gif]/>mkdir Fills/Level
[local:midas:myexpt.gif]/>cd Fills/Level
[local:midas:Level]/>create string Src
String length [32]: 256
[local:midas:S]Level>create int X
[local:midas:S]Level>create int Y
[local:midas:S]Level>create double Limits[4]
[local:midas:S]Level>create string Fillcolors[4]
String length [32]: 4

[local:midas:S]Level>ls
Src
X                               0
Y                               0
Limits
                                0
                                0
                                0
                                0
Fillcolors

                                
                                
                                
[local:midas:S]Level>                                
.fi
.PP
 
.PP
\fBNote:\fP
.RS 4
The array lengths, of course, depend on the user's requirements, but the length of the two arrays must be the same.
.RE
.PP
One could \fBset\fP the values (which is rather tedious) or
.IP "1." 4
\fBsave\fP the structure into a file
.IP "2." 4
\fBedit\fP the file to fill the values,
.IP "3." 4
then \fBreload\fP,
.PP
.PP
i.e. 
.PP
.nf
[local:midas:S]Level>save level.odb
[local:midas:S]Level>quit
>edit level.odb
... fill in the values & save the file ...

>odbedit
[local:midas:S]/>load level.odb

.fi
.PP
.PP
Once filled with values, the saved odb file might look like this:
.PP
.PP
.nf
[/Custom/Images/myexpt.gif/Fills/Level]
Src = STRING : [256] /equipment/Trigger/statistics/events sent
X = INT : 250
Y = INT : 550
Limits = DOUBLE[4] :
[0] 0
[1] 10
[2] 10000
[3] 100000
Fillcolors = STRING[4] :
[8] 00FF00
[8] AAFF00
[8] AA0000
[8] FF0000
.fi
.PP
.PP
This subtree ( Level in the example) can be duplicated for as many Fills as required, using a unique <fill_name> for each subdirectory.
.PP

.br

.br
.SS "Explanation of the keys in the /Custom/images/fills ODB subtree"
Keys in the ODB subtree ../Fills/<fill_name>   ODB Key  Explanation  
.PP
.../Fills/<fill_name>  
.br
 DIR 
.br
 
.PP

.br
 Src  STRING Path of a valid ODB Key variable. May also include a \fBlogic calculation\fP. This is the value to be used for this fill.  
.PP

.br
 X  INT X position for this fill in pixels  
.PP

.br
 Y  INT Y position for this label in pixels  
.PP

.br
 Limits[array]  INT Variable length array containing the values of the limits that when reached cause a colour change. Array length must match length of array \fBFillcolors\fP.  
.PP

.br
 Fillcolors[array]  INT Variable length array containing the colours corresponding to the \fBLimits\fP array. Array size must match \fBLimits\fP array size.   Above: Meaning of keys in the ODB /Custom/Images/Fills/<fill_name> subtree. 
.SS "fills/SRC: Logical  calculation"
An extra feature has been added (\fBMay 2010\fP) to the SRC key to allow a logical calculation to determine the value used for the fill. 
.br
 Up to two operators are permitted and they must be either 
.PD 0

.IP "\(bu" 2
'>>' (shift to the right) or 
.IP "\(bu" 2
'&' (bitwise AND). 
.PP
A hexadecimal number preceded by '0x' is also supported. 
.br
 This feature enables a SRC key that is actually a bit pattern to be used for a fill. 
.br
 In the following example, a gas valve is open if bit 14 of PLCR[136] is TRUE and closed if bit 15 is TRUE (bits are from 0-15). The contents of PLCR[136] are shifted to the right by 14 and then a logical AND is performed to clear all but the lowest 2 bits. The result is used to colour the valve body lime green is the valve is open and black if it is closed. If neither bit is set (i.e. the valve is neither open nor closed) the valve body is coloured red to indicate an error. Anything else (i.e. both bits TRUE) will give a gray colour.
.PP
.PP
.nf
[local:t2kgas:S]/>ls /custom/images/Pump_20.gif/fills/d2vb3
Src                             /Equipment/TpcGasPlc/Variables/PLCR[136] >> 14 & 0x3
X                               905
Y                               536
limits
                                0
                                1
                                2
                                3
Fillcolors
                                808080
                                00FF00
                                000000
                                808080
[local:t2kgas:S]/>                    
.fi
.PP
.PP
Any fill that requires a more complicated calculation than this, will have to be done using Javascript.
.PP

.br
.PP

.br
   
.SH "Edit boxes floating on top of a graphic"
.PP
An edit box can be placed on top of a graphic by means of an HTML style tag. The custom page code would look like this:
.PP
.PP
.nf
<div style='position:absolute; top:100px; left:50px;'>
<odb src='/Runinfo/run number' edit=1>
</div>
<img src='custom.gif'>
.fi
.PP
.PP
The \fB<div\fP ...> tag surrounding the <odb ...> tag places this directly on top of the 'custom.gif' image, where it can be clicked to be edited.
.PP
The same thing could be done in JavaScript using the ODBEdit function from the \fBJavaScript built-in library mhttpd.js\fP :
.PP
.PP
.nf
<div style='position:absolute; top:100px; left:50px;'>
<script type='text/javascript'>
document.write('Using Javascript and ODBEdit:')
path='/runinfo/run number'
rn = ODBGet(path)
document.write('<a href='#' onclick='ODBEdit(path)' >')
document.write(rn)
document.write('</a>');
document.write('') ;
</script>
</div>
<img src='custom.gif'>
.fi
.PP
.PP
The JavaScript version can be much more flexible than the HTML version. For example, for the EBIT experiment at TRIUMF, different images are shown depending on the experimental mode. This means that the edit boxes have to be placed at different positions according to the image used. The following JavaScript code fragment illustrates this:
.PP
.PP
.nf
// pulse1 width (TITAN beam gate 1 TIBG1 ) 
if(ppg_mode == '1d')
   document.write('<div style='position:absolute;  left:364px; top:225px;'>') // mode 1d
else if(ppg_mode == '1c')
   document.write('<div style='position:absolute;  left:248px; top:207px;'>') // mode 1c
else
   document.write('<div style='position:absolute;  left:248px; top:220px;'>') // modes 1a 1b

var jpath_p1w =block_path + '/pulse1/pulse width (ms)'
jvar = ODBGet(jpath_p1w);
document.write('<a href='#' onclick='ODBEdit(jpath_p1w)' >')
document.write(jvar + 'ms');
document.write('</a>');
document.write('') ;
document.write('</div>')
.fi
.PP
.PP
The EBIT custom page is shown \fBhere\fP.
.PP

.br
.PP

.br
.SS "Password protection of Edit Boxes"
It is a good idea to protect the Edit Box from \fBaccidental access\fP. This is done by a using the \fBpwd option\fP in the <odb ...> tag, and adding the same Javascript function \fBpromptpwd()\fP as was \fBused above\fP for password protection of an area map. 
.PP
.nf
<!--
function promptpwd(path)
{
    pwd = prompt('Please enter password', '');
    document.cookie = 'cpwd=' + pwd;
    location.href = path;
}
//-->
</script>
...
...

<odb src='/...' edit=1 pwd='CustomPwd'>

...

.fi
.PP
.PP

.br
.PP

.br
.PP
.IP "\(bu" 2
\fBDemo of custom image page\fP
.IP "\(bu" 2
\fBInternal custom page\fP
.PP
.PP

.br
.PP
.PP
 
